#include <stdio.h>
#include <string.h>
#define MAXRC 100
#define MAXN 100
#define MIN(a, b) ((a) > (b) ? (a) : (b))

int R, C, N;
char map[MAXRC + 5][MAXRC + 5];
int cmd[MAXN];
int visited[MAXRC + 5][MAXRC];

typedef struct {
    int y, x;
}ELE;

ELE cluster[MAXRC * MAXRC + 10];
int ccnt = 0;

ELE q[MAXRC * MAXRC * 10];
int wp, rp;
void enq(int y, int x) { q[wp].y = y; q[wp++].x = x; }
ELE deq(void) { return q[rp++]; }
int empty(void) { return wp == rp; }

int dy[] = { -1, 1, 0, 0 };
int dx[] = { 0, 0, -1, 1 };

void Get_Input(void) {
    scanf("%d %d", &R, &C);
    for (int i = 0; i < R; i++) {
        scanf("%s", &map[i]);
    }
    scanf("%d", &N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &cmd[i]);
    }
}

void Print_Map(void) {
    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            printf("%c", map[i][j]);
        }
        printf("\n");
    }
    //printf("\n");
}

void Throw_Stick(int n) {
    if (n % 2 == 0) {
        // 왼쪽에서 오른쪽으로 던짐
        for (int i = 0; i < C; i++) {
            if (map[R-cmd[n]][i] == 'x') {
                map[R-cmd[n]][i] = '.'; // 부시기
                break;
            }
        }
    }
    else {
        // 오른쪽에서 왼쪽으로 던짐
        for (int i = C - 1; i >= 0; i--) {
            if (map[R-cmd[n]][i] == 'x') {
                map[R-cmd[n]][i] = '.'; // 부시기
                break;
            }
        }
    }
    //Print_Map();
}


void BFS(int sy, int sx) {
    // 초기화
    wp = 0, rp = 0;

    enq(sy, sx);
    visited[sy][sx] = 1;
    while (!empty()) {
        ELE cur = deq();
        for (int i = 0; i < 4; i++) {
            int ny = cur.y + dy[i];
            int nx = cur.x + dx[i];
            if (ny < 0 || ny >= R || nx < 0 || nx >= C) continue;
            if (map[ny][nx] == '.') continue;
            if (visited[ny][nx] == 1) continue;
            enq(ny, nx);
            visited[ny][nx] = 1;
        }
    }
}

int Find_Cluster(void) {
    // 바닥에 있는 모든 미네랄로부터 BFS한 후, 방문 안된 것이 있으면 떠 있는 클러스터
    int flag = 0;
    memset(visited, 0, sizeof(visited));
    memset(cluster, 0, sizeof(cluster));
    ccnt = 0;
    for (int i = 0; i < C; i++) {
        if (map[R - 1][i] == 'x' && visited[R - 1][i] == 0) {
            BFS(R - 1, i);
        }
    }

    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            if (map[i][j] == 'x' && visited[i][j] == 0) {
                flag = 1;
                cluster[ccnt].y = i, cluster[ccnt++].x = j;
            }
        }
    }
    return flag;
}


int Get_Min_Height(void) {
    int min = 0x7fffffff;
    for (int i = 0; i < ccnt; i++) {
        int cnt = 0;
        for (int j = cluster[i].y+1; j < R; j++) {
            if (map[j][cluster[i].x] == '.') cnt++;
            if (map[j][cluster[i].x] == 'x' && visited[j][cluster[i].x] == 1) {
                break;
            }
        }
        if (cnt < min) min = cnt;
    }
    return min;
}

void Drop_Cluster(int h) {
    for (int i = 0; i < C; i++) {
        for (int j = R - 1; j >= 0; j--) {
            if (map[j][i] == 'x' && visited[j][i] == 0) {
                map[j + h][i] = map[j][i];
                map[j][i] = '.';
            }
        }
    }
    //Print_Map();
}

int main(void) {
    int h;
    Get_Input();
    for (int n = 0; n < N; n++) {
        Throw_Stick(n);
        if(Find_Cluster()){
            h = Get_Min_Height();
            Drop_Cluster(h);
        }
    }
    Print_Map();
    return 0;
}
